version: '3.8'

services:
  # NetApp ONTAP MCP Server (HTTP Mode)
  ontap-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ontap-mcp-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - mcp-network

  # Demo Web UI (Optional)
  demo-ui:
    build:
      context: ./demo
      dockerfile: Dockerfile
    container_name: ontap-mcp-demo
    ports:
      - "8080:8080"
    volumes:
      # Mount clusters.json if it exists (optional, contains credentials)
      # Demo will auto-load clusters on startup if this file is present
      - ./demo/clusters.json:/usr/share/nginx/html/clusters.json:ro
    depends_on:
      ontap-mcp:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

# Usage:
#   # Quick start (with cluster auto-loading):
#   cp demo/clusters.json.example demo/clusters.json  # Edit with your clusters
#   docker-compose up -d
#   
#   # Or use make:
#   make run-demo
#
#   # Access:
#   # - MCP Server: http://localhost:3000
#   # - Demo UI:    http://localhost:8080
#
#   # View logs:
#   docker-compose logs -f
#
#   # Stop:
#   docker-compose down
#
# Note: If demo/clusters.json exists, the demo UI will auto-load those clusters
#       into the MCP session on page load. If not, demo works normally with no
#       clusters pre-loaded (add them manually via UI).
